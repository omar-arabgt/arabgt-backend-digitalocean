# ArabGT Data Processing Documentation

## Overview
This system fetches data from the WordPress tables of the ArabGT website, processes the posts to clean and structure them, and then stores the processed data into a custom database. The purpose of this process is to have better content management and usage for mobile application.

### 1. Helpers Module (`helpers.py`)
This module is responsible for fetching posts from the WordPress database, processing them, and saving them into our database.

### 2. Preprocessing Module (`preprocessing.py`)
This module handles the content extraction, cleaning, and structuring of posts. It includes functions for processing text, handling multimedia elements, and managing external/enternal links.

---

## Helpers Module

### Functions

#### `fetch_and_process_posts(posts)`
- **Purpose**: Processes a list of WordPress posts, extracts relevant information, and saves them into the custom database.
- **Steps**:
    1. For each post in the provided list:
        - Preprocess the article using `preprocess_article`.
        - Fetch additional information such as author, categories, and tags.
        - Create a new `Post` object and save it to the database.
        - Log errors if the post or author does not exist or if there are any database errors.
- **Returns**: A list of saved `Post` objects.

#### `fetch_and_process_all_wp_posts()`
- **Purpose**: Fetches all published WordPress posts, processes them, and saves them into the custom database.
- **Steps**:
    1. Fetch all published posts with type 'post'.
    2. Process these posts using `fetch_and_process_posts`.
    3. Calculate and log the response time.
    4. Return a response containing the number of processed and saved posts.
- **Returns**: A dictionary with response details including processed posts and response time.

#### `fetch_and_process_wp_post_by_id(post_id)`
- **Purpose**: Fetches and processes a single WordPress post by its ID.
- **Steps**:
    1. Fetch the post by ID.
    2. Process the post using `fetch_and_process_posts`.
    3. Calculate and log the response time.
    4. Return a response containing the processed post ID and response time.
- **Returns**: A dictionary with response details including the processed post ID and response time.

#### `fetch_and_update_related_articles_ids()`
- **Purpose**: Updates the `related_articles` field for all posts in the custom database.
- **Steps**:
    1. Fetch all posts from the custom database.
    2. For each post, update the related article IDs using `update_related_article_ids`.
    3. Save the updated posts and log any missing titles.
- **Returns**: A dictionary with response details including processed posts and missing titles.

#### `fetch_and_update_related_articles_ids_by_id(id)`
- **Purpose**: Updates the `related_articles` field for a single post by its ID.
- **Steps**:
    1. Fetch the post by ID.
    2. Update the related article IDs using `update_related_article_ids`.
    3. Save the updated post and calculate the response time.
- **Returns**: A dictionary with response details including the processed post ID, response time, and missing titles.

---

## Preprocessing Module

### Functions

#### `extract_elements(element)`
- **Purpose**: Extracts text and media elements from the HTML content of a post.
- **Steps**:
    1. Traverse the HTML elements.
    2. Extract text, headings, and media elements like images and iframes.
    3. Handle special cases like strong tags and lists.
    4. Return the structured data and any external links found.

#### `handle_galleries(text)`
- **Purpose**: Processes gallery shortcodes within the text.
- **Steps**:
    1. Split the text by gallery shortcodes.
    2. Extract gallery IDs and create media elements for them.
- **Returns**: A list of elements with gallery links replaced.

#### `replace_gallery_ids_with_links(elements)`
- **Purpose**: Replaces gallery IDs with actual URLs of the images.
- **Steps**:
    1. Fetch attachment posts using the gallery IDs.
    2. Replace gallery IDs in elements with corresponding image URLs.
- **Returns**: Updated list of elements with gallery links.

#### `get_thumbnail(post_id)`
- **Purpose**: Retrieves the thumbnail URL for a given post ID.
- **Steps**:
    1. Fetch the thumbnail ID from post metadata.
    2. Retrieve the thumbnail URL using the thumbnail ID.
- **Returns**: The thumbnail URL.

#### `process_external_links(external_links)`
- **Purpose**: Processes external links found in the post content.
- **Steps**:
    1. Decode and categorize external links.
    2. Identify and format related article links from ArabGT.
- **Returns**: A list of related articles and cleaned external links.

#### `normalize_title(title)`
- **Purpose**: Normalizes post titles by converting them to lowercase and removing special characters.
- **Steps**:
    1. Convert to lowercase.
    2. Replace hyphens and other special characters.
- **Returns**: Normalized title.

#### `update_related_article_ids(post)`
- **Purpose**: Updates the `related_articles` field in the post content with actual post IDs.
- **Steps**:
    1. Parse the post content.
    2. Match related article titles with existing posts and update the IDs.
    3. Track any missing titles that could not be matched.
- **Returns**: Updated post and list of missing titles.

#### `preprocess_article(article)`
- **Purpose**: Preprocesses a WordPress post to extract and structure its content.
- **Steps**:
    1. Parse the post content using BeautifulSoup.
    2. Extract structured data and external links.
    3. Handle galleries and replace gallery IDs with links.
    4. Process external links and identify related articles.
    5. Fetch the thumbnail URL.
    6. Compile all extracted and processed data into a structured format.
- **Returns**: A dictionary with the processed post data.

---

## Usage

- **Data Fetching**: The `fetch_and_process_all_wp_posts` and `fetch_and_process_wp_post_by_id` functions are used to fetch and process posts from the WordPress database.
- **Updating Related Articles**: The `fetch_and_update_related_articles_ids` and `fetch_and_update_related_articles_ids_by_id` functions update related articles in the post content.
- **Preprocessing**: The `preprocess_article` function is used internally to clean and structure the post content, extracting elements, handling galleries, and processing external links.
---